/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ProofOfHumanityInterface extends ethers.utils.Interface {
  functions: {
    "addSubmission(string,string)": FunctionFragment;
    "addSubmissionManually(address[],string[],string[])": FunctionFragment;
    "addVouch(address)": FunctionFragment;
    "challengeRequest(address,uint8,address,string)": FunctionFragment;
    "changeArbitrator(address,bytes)": FunctionFragment;
    "changeDurations(uint64,uint64,uint64)": FunctionFragment;
    "changeGovernor(address)": FunctionFragment;
    "changeLoserStakeMultiplier(uint256)": FunctionFragment;
    "changeMetaEvidence(string,string)": FunctionFragment;
    "changeRequiredNumberOfVouches(uint64)": FunctionFragment;
    "changeSharedStakeMultiplier(uint256)": FunctionFragment;
    "changeStateToPending(address,address[],bytes[],uint256[])": FunctionFragment;
    "changeSubmissionBaseDeposit(uint256)": FunctionFragment;
    "changeWinnerStakeMultiplier(uint256)": FunctionFragment;
    "executeRequest(address)": FunctionFragment;
    "fundAppeal(address,uint256,uint8)": FunctionFragment;
    "fundSubmission(address)": FunctionFragment;
    "processVouches(address,uint256,uint256)": FunctionFragment;
    "reapplySubmission(string,string)": FunctionFragment;
    "removeSubmission(address,string)": FunctionFragment;
    "removeSubmissionManually(address)": FunctionFragment;
    "removeVouch(address)": FunctionFragment;
    "rule(uint256,uint256)": FunctionFragment;
    "submitEvidence(address,string)": FunctionFragment;
    "withdrawFeesAndRewards(address,address,uint256,uint256,uint256)": FunctionFragment;
    "withdrawSubmission()": FunctionFragment;
    "arbitratorDataList(uint256)": FunctionFragment;
    "arbitratorDisputeIDToDisputeData(address,uint256)": FunctionFragment;
    "challengePeriodDuration()": FunctionFragment;
    "checkRequestDuplicates(address,uint256,address)": FunctionFragment;
    "getArbitratorDataListCount()": FunctionFragment;
    "getChallengeInfo(address,uint256,uint256)": FunctionFragment;
    "getContributions(address,uint256,uint256,uint256,address)": FunctionFragment;
    "getNumberOfVouches(address,uint256)": FunctionFragment;
    "getRequestInfo(address,uint256)": FunctionFragment;
    "getRoundInfo(address,uint256,uint256,uint256)": FunctionFragment;
    "getSubmissionInfo(address)": FunctionFragment;
    "governor()": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "loserStakeMultiplier()": FunctionFragment;
    "renewalPeriodDuration()": FunctionFragment;
    "requiredNumberOfVouches()": FunctionFragment;
    "sharedStakeMultiplier()": FunctionFragment;
    "submissionBaseDeposit()": FunctionFragment;
    "submissionCounter()": FunctionFragment;
    "submissionDuration()": FunctionFragment;
    "vouches(address,address)": FunctionFragment;
    "winnerStakeMultiplier()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSubmission",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSubmissionManually",
    values: [string[], string[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "addVouch", values: [string]): string;
  encodeFunctionData(
    functionFragment: "challengeRequest",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeArbitrator",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDurations",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLoserStakeMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMetaEvidence",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequiredNumberOfVouches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSharedStakeMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStateToPending",
    values: [string, string[], BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSubmissionBaseDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeWinnerStakeMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRequest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fundAppeal",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundSubmission",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "processVouches",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reapplySubmission",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSubmission",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSubmissionManually",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "removeVouch", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rule",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEvidence",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeesAndRewards",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSubmission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arbitratorDataList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitratorDisputeIDToDisputeData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challengePeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkRequestDuplicates",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getArbitratorDataListCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengeInfo",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContributions",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfVouches",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundInfo",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmissionInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "loserStakeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renewalPeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredNumberOfVouches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sharedStakeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submissionBaseDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submissionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submissionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vouches",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "winnerStakeMultiplier",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSubmissionManually",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVouch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "challengeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeArbitrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLoserStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMetaEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequiredNumberOfVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSharedStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStateToPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSubmissionBaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeWinnerStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundAppeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reapplySubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSubmissionManually",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVouch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeesAndRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitratorDataList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitratorDisputeIDToDisputeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengePeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRequestDuplicates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArbitratorDataListCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallengeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmissionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loserStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewalPeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredNumberOfVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionBaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vouches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winnerStakeMultiplier",
    data: BytesLike
  ): Result;

  events: {
    "AddSubmission(address,uint256)": EventFragment;
    "AppealContribution(address,uint256,uint8,address,uint256)": EventFragment;
    "ArbitratorComplete(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ChallengeResolved(address,uint256,uint256)": EventFragment;
    "Dispute(address,uint256,uint256,uint256)": EventFragment;
    "Evidence(address,uint256,address,string)": EventFragment;
    "HasPaidAppealFee(address,uint256,uint8)": EventFragment;
    "MetaEvidence(uint256,string)": EventFragment;
    "ReapplySubmission(address,uint256)": EventFragment;
    "RemoveSubmission(address,address,uint256)": EventFragment;
    "Ruling(address,uint256,uint256)": EventFragment;
    "SubmissionChallenged(address,uint256,uint256)": EventFragment;
    "VouchAdded(address,address)": EventFragment;
    "VouchRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddSubmission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppealContribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArbitratorComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChallengeResolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Dispute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Evidence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HasPaidAppealFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaEvidence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReapplySubmission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveSubmission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ruling"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmissionChallenged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VouchAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VouchRemoved"): EventFragment;
}

export type AddSubmissionEvent = TypedEvent<
  [string, BigNumber] & { _submissionID: string; _requestID: BigNumber }
>;

export type AppealContributionEvent = TypedEvent<
  [string, BigNumber, number, string, BigNumber] & {
    _submissionID: string;
    _challengeID: BigNumber;
    _party: number;
    _contributor: string;
    _amount: BigNumber;
  }
>;

export type ArbitratorCompleteEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    _arbitrator: string;
    _governor: string;
    _submissionBaseDeposit: BigNumber;
    _submissionDuration: BigNumber;
    _challengePeriodDuration: BigNumber;
    _requiredNumberOfVouches: BigNumber;
    _sharedStakeMultiplier: BigNumber;
    _winnerStakeMultiplier: BigNumber;
    _loserStakeMultiplier: BigNumber;
  }
>;

export type ChallengeResolvedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _submissionID: string;
    _requestID: BigNumber;
    _challengeID: BigNumber;
  }
>;

export type DisputeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    _arbitrator: string;
    _disputeID: BigNumber;
    _metaEvidenceID: BigNumber;
    _evidenceGroupID: BigNumber;
  }
>;

export type EvidenceEvent = TypedEvent<
  [string, BigNumber, string, string] & {
    _arbitrator: string;
    _evidenceGroupID: BigNumber;
    _party: string;
    _evidence: string;
  }
>;

export type HasPaidAppealFeeEvent = TypedEvent<
  [string, BigNumber, number] & {
    _submissionID: string;
    _challengeID: BigNumber;
    _side: number;
  }
>;

export type MetaEvidenceEvent = TypedEvent<
  [BigNumber, string] & { _metaEvidenceID: BigNumber; _evidence: string }
>;

export type ReapplySubmissionEvent = TypedEvent<
  [string, BigNumber] & { _submissionID: string; _requestID: BigNumber }
>;

export type RemoveSubmissionEvent = TypedEvent<
  [string, string, BigNumber] & {
    _requester: string;
    _submissionID: string;
    _requestID: BigNumber;
  }
>;

export type RulingEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _arbitrator: string;
    _disputeID: BigNumber;
    _ruling: BigNumber;
  }
>;

export type SubmissionChallengedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _submissionID: string;
    _requestID: BigNumber;
    _challengeID: BigNumber;
  }
>;

export type VouchAddedEvent = TypedEvent<
  [string, string] & { _submissionID: string; _voucher: string }
>;

export type VouchRemovedEvent = TypedEvent<
  [string, string] & { _submissionID: string; _voucher: string }
>;

export class ProofOfHumanity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ProofOfHumanityInterface;

  functions: {
    addSubmission(
      _evidence: string,
      _name: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSubmissionManually(
      _submissionIDs: string[],
      _evidence: string[],
      _names: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVouch(
      _submissionID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    challengeRequest(
      _submissionID: string,
      _reason: BigNumberish,
      _duplicateID: string,
      _evidence: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeArbitrator(
      _arbitrator: string,
      _arbitratorExtraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeDurations(
      _submissionDuration: BigNumberish,
      _renewalPeriodDuration: BigNumberish,
      _challengePeriodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeGovernor(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeLoserStakeMultiplier(
      _loserStakeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMetaEvidence(
      _registrationMetaEvidence: string,
      _clearingMetaEvidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRequiredNumberOfVouches(
      _requiredNumberOfVouches: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeSharedStakeMultiplier(
      _sharedStakeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeStateToPending(
      _submissionID: string,
      _vouches: string[],
      _signatures: BytesLike[],
      _expirationTimestamps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeSubmissionBaseDeposit(
      _submissionBaseDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeWinnerStakeMultiplier(
      _winnerStakeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeRequest(
      _submissionID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundAppeal(
      _submissionID: string,
      _challengeID: BigNumberish,
      _side: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundSubmission(
      _submissionID: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processVouches(
      _submissionID: string,
      _requestID: BigNumberish,
      _iterations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reapplySubmission(
      _evidence: string,
      _name: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSubmission(
      _submissionID: string,
      _evidence: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSubmissionManually(
      _submissionID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeVouch(
      _submissionID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rule(
      _disputeID: BigNumberish,
      _ruling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitEvidence(
      _submissionID: string,
      _evidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFeesAndRewards(
      _beneficiary: string,
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSubmission(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arbitratorDataList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        arbitrator: string;
        metaEvidenceUpdates: BigNumber;
        arbitratorExtraData: string;
      }
    >;

    arbitratorDisputeIDToDisputeData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { challengeID: BigNumber; submissionID: string }
    >;

    challengePeriodDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkRequestDuplicates(
      _submissionID: string,
      _requestID: BigNumberish,
      _duplicateID: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getArbitratorDataListCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getChallengeInfo(
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, number, BigNumber] & {
        lastRoundID: number;
        challenger: string;
        disputeID: BigNumber;
        ruling: number;
        duplicateSubmissionIndex: BigNumber;
      }
    >;

    getContributions(
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish,
      _contributor: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber, BigNumber]] & {
        contributions: [BigNumber, BigNumber, BigNumber];
      }
    >;

    getNumberOfVouches(
      _submissionID: string,
      _requestID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRequestInfo(
      _submissionID: string,
      _requestID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        number,
        number,
        number,
        number,
        string,
        string,
        number
      ] & {
        disputed: boolean;
        resolved: boolean;
        requesterLost: boolean;
        currentReason: number;
        nbParallelDisputes: number;
        lastChallengeID: number;
        arbitratorDataID: number;
        requester: string;
        ultimateChallenger: string;
        usedReasons: number;
      }
    >;

    getRoundInfo(
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, [BigNumber, BigNumber, BigNumber], number, BigNumber] & {
        appealed: boolean;
        paidFees: [BigNumber, BigNumber, BigNumber];
        sideFunded: number;
        feeRewards: BigNumber;
      }
    >;

    getSubmissionInfo(
      _submissionID: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, boolean, boolean, BigNumber] & {
        status: number;
        submissionTime: BigNumber;
        index: BigNumber;
        registered: boolean;
        hasVouched: boolean;
        numberOfRequests: BigNumber;
      }
    >;

    governor(overrides?: CallOverrides): Promise<[string]>;

    isRegistered(
      _submissionID: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    loserStakeMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    renewalPeriodDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    requiredNumberOfVouches(overrides?: CallOverrides): Promise<[BigNumber]>;

    sharedStakeMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    submissionBaseDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    submissionCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    submissionDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    vouches(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    winnerStakeMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addSubmission(
    _evidence: string,
    _name: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSubmissionManually(
    _submissionIDs: string[],
    _evidence: string[],
    _names: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVouch(
    _submissionID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  challengeRequest(
    _submissionID: string,
    _reason: BigNumberish,
    _duplicateID: string,
    _evidence: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeArbitrator(
    _arbitrator: string,
    _arbitratorExtraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeDurations(
    _submissionDuration: BigNumberish,
    _renewalPeriodDuration: BigNumberish,
    _challengePeriodDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeGovernor(
    _governor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeLoserStakeMultiplier(
    _loserStakeMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMetaEvidence(
    _registrationMetaEvidence: string,
    _clearingMetaEvidence: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRequiredNumberOfVouches(
    _requiredNumberOfVouches: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeSharedStakeMultiplier(
    _sharedStakeMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeStateToPending(
    _submissionID: string,
    _vouches: string[],
    _signatures: BytesLike[],
    _expirationTimestamps: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeSubmissionBaseDeposit(
    _submissionBaseDeposit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeWinnerStakeMultiplier(
    _winnerStakeMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeRequest(
    _submissionID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundAppeal(
    _submissionID: string,
    _challengeID: BigNumberish,
    _side: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundSubmission(
    _submissionID: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processVouches(
    _submissionID: string,
    _requestID: BigNumberish,
    _iterations: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reapplySubmission(
    _evidence: string,
    _name: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSubmission(
    _submissionID: string,
    _evidence: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSubmissionManually(
    _submissionID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeVouch(
    _submissionID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rule(
    _disputeID: BigNumberish,
    _ruling: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitEvidence(
    _submissionID: string,
    _evidence: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFeesAndRewards(
    _beneficiary: string,
    _submissionID: string,
    _requestID: BigNumberish,
    _challengeID: BigNumberish,
    _round: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSubmission(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arbitratorDataList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      arbitrator: string;
      metaEvidenceUpdates: BigNumber;
      arbitratorExtraData: string;
    }
  >;

  arbitratorDisputeIDToDisputeData(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { challengeID: BigNumber; submissionID: string }
  >;

  challengePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

  checkRequestDuplicates(
    _submissionID: string,
    _requestID: BigNumberish,
    _duplicateID: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getArbitratorDataListCount(overrides?: CallOverrides): Promise<BigNumber>;

  getChallengeInfo(
    _submissionID: string,
    _requestID: BigNumberish,
    _challengeID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber, number, BigNumber] & {
      lastRoundID: number;
      challenger: string;
      disputeID: BigNumber;
      ruling: number;
      duplicateSubmissionIndex: BigNumber;
    }
  >;

  getContributions(
    _submissionID: string,
    _requestID: BigNumberish,
    _challengeID: BigNumberish,
    _round: BigNumberish,
    _contributor: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getNumberOfVouches(
    _submissionID: string,
    _requestID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestInfo(
    _submissionID: string,
    _requestID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      boolean,
      number,
      number,
      number,
      number,
      string,
      string,
      number
    ] & {
      disputed: boolean;
      resolved: boolean;
      requesterLost: boolean;
      currentReason: number;
      nbParallelDisputes: number;
      lastChallengeID: number;
      arbitratorDataID: number;
      requester: string;
      ultimateChallenger: string;
      usedReasons: number;
    }
  >;

  getRoundInfo(
    _submissionID: string,
    _requestID: BigNumberish,
    _challengeID: BigNumberish,
    _round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, [BigNumber, BigNumber, BigNumber], number, BigNumber] & {
      appealed: boolean;
      paidFees: [BigNumber, BigNumber, BigNumber];
      sideFunded: number;
      feeRewards: BigNumber;
    }
  >;

  getSubmissionInfo(
    _submissionID: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, boolean, boolean, BigNumber] & {
      status: number;
      submissionTime: BigNumber;
      index: BigNumber;
      registered: boolean;
      hasVouched: boolean;
      numberOfRequests: BigNumber;
    }
  >;

  governor(overrides?: CallOverrides): Promise<string>;

  isRegistered(
    _submissionID: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loserStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  renewalPeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

  requiredNumberOfVouches(overrides?: CallOverrides): Promise<BigNumber>;

  sharedStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  submissionBaseDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  submissionCounter(overrides?: CallOverrides): Promise<BigNumber>;

  submissionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  vouches(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  winnerStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addSubmission(
      _evidence: string,
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSubmissionManually(
      _submissionIDs: string[],
      _evidence: string[],
      _names: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addVouch(_submissionID: string, overrides?: CallOverrides): Promise<void>;

    challengeRequest(
      _submissionID: string,
      _reason: BigNumberish,
      _duplicateID: string,
      _evidence: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeArbitrator(
      _arbitrator: string,
      _arbitratorExtraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    changeDurations(
      _submissionDuration: BigNumberish,
      _renewalPeriodDuration: BigNumberish,
      _challengePeriodDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeGovernor(_governor: string, overrides?: CallOverrides): Promise<void>;

    changeLoserStakeMultiplier(
      _loserStakeMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMetaEvidence(
      _registrationMetaEvidence: string,
      _clearingMetaEvidence: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRequiredNumberOfVouches(
      _requiredNumberOfVouches: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSharedStakeMultiplier(
      _sharedStakeMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeStateToPending(
      _submissionID: string,
      _vouches: string[],
      _signatures: BytesLike[],
      _expirationTimestamps: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeSubmissionBaseDeposit(
      _submissionBaseDeposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeWinnerStakeMultiplier(
      _winnerStakeMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeRequest(
      _submissionID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fundAppeal(
      _submissionID: string,
      _challengeID: BigNumberish,
      _side: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fundSubmission(
      _submissionID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    processVouches(
      _submissionID: string,
      _requestID: BigNumberish,
      _iterations: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reapplySubmission(
      _evidence: string,
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSubmission(
      _submissionID: string,
      _evidence: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSubmissionManually(
      _submissionID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeVouch(
      _submissionID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rule(
      _disputeID: BigNumberish,
      _ruling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitEvidence(
      _submissionID: string,
      _evidence: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFeesAndRewards(
      _beneficiary: string,
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawSubmission(overrides?: CallOverrides): Promise<void>;

    arbitratorDataList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        arbitrator: string;
        metaEvidenceUpdates: BigNumber;
        arbitratorExtraData: string;
      }
    >;

    arbitratorDisputeIDToDisputeData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { challengeID: BigNumber; submissionID: string }
    >;

    challengePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    checkRequestDuplicates(
      _submissionID: string,
      _requestID: BigNumberish,
      _duplicateID: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getArbitratorDataListCount(overrides?: CallOverrides): Promise<BigNumber>;

    getChallengeInfo(
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, number, BigNumber] & {
        lastRoundID: number;
        challenger: string;
        disputeID: BigNumber;
        ruling: number;
        duplicateSubmissionIndex: BigNumber;
      }
    >;

    getContributions(
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish,
      _contributor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getNumberOfVouches(
      _submissionID: string,
      _requestID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestInfo(
      _submissionID: string,
      _requestID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        number,
        number,
        number,
        number,
        string,
        string,
        number
      ] & {
        disputed: boolean;
        resolved: boolean;
        requesterLost: boolean;
        currentReason: number;
        nbParallelDisputes: number;
        lastChallengeID: number;
        arbitratorDataID: number;
        requester: string;
        ultimateChallenger: string;
        usedReasons: number;
      }
    >;

    getRoundInfo(
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, [BigNumber, BigNumber, BigNumber], number, BigNumber] & {
        appealed: boolean;
        paidFees: [BigNumber, BigNumber, BigNumber];
        sideFunded: number;
        feeRewards: BigNumber;
      }
    >;

    getSubmissionInfo(
      _submissionID: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, boolean, boolean, BigNumber] & {
        status: number;
        submissionTime: BigNumber;
        index: BigNumber;
        registered: boolean;
        hasVouched: boolean;
        numberOfRequests: BigNumber;
      }
    >;

    governor(overrides?: CallOverrides): Promise<string>;

    isRegistered(
      _submissionID: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loserStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    renewalPeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    requiredNumberOfVouches(overrides?: CallOverrides): Promise<BigNumber>;

    sharedStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    submissionBaseDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    submissionCounter(overrides?: CallOverrides): Promise<BigNumber>;

    submissionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    vouches(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    winnerStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AddSubmission(address,uint256)"(
      _submissionID?: string | null,
      _requestID?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _submissionID: string; _requestID: BigNumber }
    >;

    AddSubmission(
      _submissionID?: string | null,
      _requestID?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _submissionID: string; _requestID: BigNumber }
    >;

    "AppealContribution(address,uint256,uint8,address,uint256)"(
      _submissionID?: string | null,
      _challengeID?: BigNumberish | null,
      _party?: null,
      _contributor?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, BigNumber],
      {
        _submissionID: string;
        _challengeID: BigNumber;
        _party: number;
        _contributor: string;
        _amount: BigNumber;
      }
    >;

    AppealContribution(
      _submissionID?: string | null,
      _challengeID?: BigNumberish | null,
      _party?: null,
      _contributor?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, BigNumber],
      {
        _submissionID: string;
        _challengeID: BigNumber;
        _party: number;
        _contributor: string;
        _amount: BigNumber;
      }
    >;

    "ArbitratorComplete(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _arbitrator?: null,
      _governor?: string | null,
      _submissionBaseDeposit?: null,
      _submissionDuration?: null,
      _challengePeriodDuration?: null,
      _requiredNumberOfVouches?: null,
      _sharedStakeMultiplier?: null,
      _winnerStakeMultiplier?: null,
      _loserStakeMultiplier?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        _arbitrator: string;
        _governor: string;
        _submissionBaseDeposit: BigNumber;
        _submissionDuration: BigNumber;
        _challengePeriodDuration: BigNumber;
        _requiredNumberOfVouches: BigNumber;
        _sharedStakeMultiplier: BigNumber;
        _winnerStakeMultiplier: BigNumber;
        _loserStakeMultiplier: BigNumber;
      }
    >;

    ArbitratorComplete(
      _arbitrator?: null,
      _governor?: string | null,
      _submissionBaseDeposit?: null,
      _submissionDuration?: null,
      _challengePeriodDuration?: null,
      _requiredNumberOfVouches?: null,
      _sharedStakeMultiplier?: null,
      _winnerStakeMultiplier?: null,
      _loserStakeMultiplier?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        _arbitrator: string;
        _governor: string;
        _submissionBaseDeposit: BigNumber;
        _submissionDuration: BigNumber;
        _challengePeriodDuration: BigNumber;
        _requiredNumberOfVouches: BigNumber;
        _sharedStakeMultiplier: BigNumber;
        _winnerStakeMultiplier: BigNumber;
        _loserStakeMultiplier: BigNumber;
      }
    >;

    "ChallengeResolved(address,uint256,uint256)"(
      _submissionID?: string | null,
      _requestID?: BigNumberish | null,
      _challengeID?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _submissionID: string; _requestID: BigNumber; _challengeID: BigNumber }
    >;

    ChallengeResolved(
      _submissionID?: string | null,
      _requestID?: BigNumberish | null,
      _challengeID?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _submissionID: string; _requestID: BigNumber; _challengeID: BigNumber }
    >;

    "Dispute(address,uint256,uint256,uint256)"(
      _arbitrator?: string | null,
      _disputeID?: BigNumberish | null,
      _metaEvidenceID?: null,
      _evidenceGroupID?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _arbitrator: string;
        _disputeID: BigNumber;
        _metaEvidenceID: BigNumber;
        _evidenceGroupID: BigNumber;
      }
    >;

    Dispute(
      _arbitrator?: string | null,
      _disputeID?: BigNumberish | null,
      _metaEvidenceID?: null,
      _evidenceGroupID?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _arbitrator: string;
        _disputeID: BigNumber;
        _metaEvidenceID: BigNumber;
        _evidenceGroupID: BigNumber;
      }
    >;

    "Evidence(address,uint256,address,string)"(
      _arbitrator?: string | null,
      _evidenceGroupID?: BigNumberish | null,
      _party?: string | null,
      _evidence?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        _arbitrator: string;
        _evidenceGroupID: BigNumber;
        _party: string;
        _evidence: string;
      }
    >;

    Evidence(
      _arbitrator?: string | null,
      _evidenceGroupID?: BigNumberish | null,
      _party?: string | null,
      _evidence?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        _arbitrator: string;
        _evidenceGroupID: BigNumber;
        _party: string;
        _evidence: string;
      }
    >;

    "HasPaidAppealFee(address,uint256,uint8)"(
      _submissionID?: string | null,
      _challengeID?: BigNumberish | null,
      _side?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { _submissionID: string; _challengeID: BigNumber; _side: number }
    >;

    HasPaidAppealFee(
      _submissionID?: string | null,
      _challengeID?: BigNumberish | null,
      _side?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { _submissionID: string; _challengeID: BigNumber; _side: number }
    >;

    "MetaEvidence(uint256,string)"(
      _metaEvidenceID?: BigNumberish | null,
      _evidence?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { _metaEvidenceID: BigNumber; _evidence: string }
    >;

    MetaEvidence(
      _metaEvidenceID?: BigNumberish | null,
      _evidence?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { _metaEvidenceID: BigNumber; _evidence: string }
    >;

    "ReapplySubmission(address,uint256)"(
      _submissionID?: string | null,
      _requestID?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _submissionID: string; _requestID: BigNumber }
    >;

    ReapplySubmission(
      _submissionID?: string | null,
      _requestID?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _submissionID: string; _requestID: BigNumber }
    >;

    "RemoveSubmission(address,address,uint256)"(
      _requester?: string | null,
      _submissionID?: string | null,
      _requestID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _requester: string; _submissionID: string; _requestID: BigNumber }
    >;

    RemoveSubmission(
      _requester?: string | null,
      _submissionID?: string | null,
      _requestID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _requester: string; _submissionID: string; _requestID: BigNumber }
    >;

    "Ruling(address,uint256,uint256)"(
      _arbitrator?: string | null,
      _disputeID?: BigNumberish | null,
      _ruling?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _arbitrator: string; _disputeID: BigNumber; _ruling: BigNumber }
    >;

    Ruling(
      _arbitrator?: string | null,
      _disputeID?: BigNumberish | null,
      _ruling?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _arbitrator: string; _disputeID: BigNumber; _ruling: BigNumber }
    >;

    "SubmissionChallenged(address,uint256,uint256)"(
      _submissionID?: string | null,
      _requestID?: BigNumberish | null,
      _challengeID?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _submissionID: string; _requestID: BigNumber; _challengeID: BigNumber }
    >;

    SubmissionChallenged(
      _submissionID?: string | null,
      _requestID?: BigNumberish | null,
      _challengeID?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _submissionID: string; _requestID: BigNumber; _challengeID: BigNumber }
    >;

    "VouchAdded(address,address)"(
      _submissionID?: string | null,
      _voucher?: string | null
    ): TypedEventFilter<
      [string, string],
      { _submissionID: string; _voucher: string }
    >;

    VouchAdded(
      _submissionID?: string | null,
      _voucher?: string | null
    ): TypedEventFilter<
      [string, string],
      { _submissionID: string; _voucher: string }
    >;

    "VouchRemoved(address,address)"(
      _submissionID?: string | null,
      _voucher?: string | null
    ): TypedEventFilter<
      [string, string],
      { _submissionID: string; _voucher: string }
    >;

    VouchRemoved(
      _submissionID?: string | null,
      _voucher?: string | null
    ): TypedEventFilter<
      [string, string],
      { _submissionID: string; _voucher: string }
    >;
  };

  estimateGas: {
    addSubmission(
      _evidence: string,
      _name: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSubmissionManually(
      _submissionIDs: string[],
      _evidence: string[],
      _names: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVouch(
      _submissionID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    challengeRequest(
      _submissionID: string,
      _reason: BigNumberish,
      _duplicateID: string,
      _evidence: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeArbitrator(
      _arbitrator: string,
      _arbitratorExtraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeDurations(
      _submissionDuration: BigNumberish,
      _renewalPeriodDuration: BigNumberish,
      _challengePeriodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeGovernor(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeLoserStakeMultiplier(
      _loserStakeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMetaEvidence(
      _registrationMetaEvidence: string,
      _clearingMetaEvidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRequiredNumberOfVouches(
      _requiredNumberOfVouches: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeSharedStakeMultiplier(
      _sharedStakeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeStateToPending(
      _submissionID: string,
      _vouches: string[],
      _signatures: BytesLike[],
      _expirationTimestamps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeSubmissionBaseDeposit(
      _submissionBaseDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeWinnerStakeMultiplier(
      _winnerStakeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeRequest(
      _submissionID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundAppeal(
      _submissionID: string,
      _challengeID: BigNumberish,
      _side: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundSubmission(
      _submissionID: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processVouches(
      _submissionID: string,
      _requestID: BigNumberish,
      _iterations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reapplySubmission(
      _evidence: string,
      _name: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSubmission(
      _submissionID: string,
      _evidence: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSubmissionManually(
      _submissionID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeVouch(
      _submissionID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rule(
      _disputeID: BigNumberish,
      _ruling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitEvidence(
      _submissionID: string,
      _evidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFeesAndRewards(
      _beneficiary: string,
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSubmission(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arbitratorDataList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    arbitratorDisputeIDToDisputeData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challengePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    checkRequestDuplicates(
      _submissionID: string,
      _requestID: BigNumberish,
      _duplicateID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArbitratorDataListCount(overrides?: CallOverrides): Promise<BigNumber>;

    getChallengeInfo(
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContributions(
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish,
      _contributor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfVouches(
      _submissionID: string,
      _requestID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestInfo(
      _submissionID: string,
      _requestID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoundInfo(
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubmissionInfo(
      _submissionID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    isRegistered(
      _submissionID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loserStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    renewalPeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    requiredNumberOfVouches(overrides?: CallOverrides): Promise<BigNumber>;

    sharedStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    submissionBaseDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    submissionCounter(overrides?: CallOverrides): Promise<BigNumber>;

    submissionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    vouches(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winnerStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addSubmission(
      _evidence: string,
      _name: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSubmissionManually(
      _submissionIDs: string[],
      _evidence: string[],
      _names: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVouch(
      _submissionID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    challengeRequest(
      _submissionID: string,
      _reason: BigNumberish,
      _duplicateID: string,
      _evidence: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeArbitrator(
      _arbitrator: string,
      _arbitratorExtraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeDurations(
      _submissionDuration: BigNumberish,
      _renewalPeriodDuration: BigNumberish,
      _challengePeriodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeGovernor(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeLoserStakeMultiplier(
      _loserStakeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMetaEvidence(
      _registrationMetaEvidence: string,
      _clearingMetaEvidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRequiredNumberOfVouches(
      _requiredNumberOfVouches: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeSharedStakeMultiplier(
      _sharedStakeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeStateToPending(
      _submissionID: string,
      _vouches: string[],
      _signatures: BytesLike[],
      _expirationTimestamps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeSubmissionBaseDeposit(
      _submissionBaseDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeWinnerStakeMultiplier(
      _winnerStakeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeRequest(
      _submissionID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundAppeal(
      _submissionID: string,
      _challengeID: BigNumberish,
      _side: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundSubmission(
      _submissionID: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processVouches(
      _submissionID: string,
      _requestID: BigNumberish,
      _iterations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reapplySubmission(
      _evidence: string,
      _name: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSubmission(
      _submissionID: string,
      _evidence: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSubmissionManually(
      _submissionID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeVouch(
      _submissionID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rule(
      _disputeID: BigNumberish,
      _ruling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitEvidence(
      _submissionID: string,
      _evidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFeesAndRewards(
      _beneficiary: string,
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSubmission(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arbitratorDataList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    arbitratorDisputeIDToDisputeData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challengePeriodDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkRequestDuplicates(
      _submissionID: string,
      _requestID: BigNumberish,
      _duplicateID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArbitratorDataListCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChallengeInfo(
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContributions(
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish,
      _contributor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfVouches(
      _submissionID: string,
      _requestID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestInfo(
      _submissionID: string,
      _requestID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoundInfo(
      _submissionID: string,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubmissionInfo(
      _submissionID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRegistered(
      _submissionID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loserStakeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renewalPeriodDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requiredNumberOfVouches(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sharedStakeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submissionBaseDeposit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submissionCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submissionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vouches(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winnerStakeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
